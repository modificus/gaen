//------------------------------------------------------------------------------
// utils.cmp - Misc utilities
//
// Gaen Concurrency Engine - http://gaen.org
// Copyright (c) 2014-2016 Lachlan Orr
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
//
//   2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
//
//   3. This notice may not be removed or altered from any source
//   distribution.
//------------------------------------------------------------------------------

// Send a message to self entity at a certain interval
component Timer
{
    float #interval = 1.0;          // interval in seconds to send the timer message
    int #message = #timer;         // message to send with each timer message, useful if multiple timers are used in the same component

    float lastNotification = 0.0;

    update
    {
        if (interval > 0.0)
        {
            lastNotification += delta;
            if (lastNotification >= interval)
            {
                @:message();
                lastNotification = 0.0;
            }
        }
    }
}

//------------------------------------------------------------------------------

component WasdCamera
{
    vec3 dirForwardInit = vec3{ 0.0, 0.0, -1.0 };
    vec3 dirRightInit = vec3{ 1.0, 0.0, 0.0 };
    vec3 dirUpInit = vec3{ 0.0, 1.0, 0.0 };

    vec3 dirForward = dirForwardInit;
    vec3 dirRight = dirRightInit;
    vec3 dirUp = dirUpInit;

    quat orientation = quat{ 0.0, 0.0, 0.0, 1.0 };

    vec3 pos = vec3{ 0.0, 0.0, 10.0 };

    float moveDelta = 5.0;
    float rotDelta = 0.0005;
    
    float forwardBackward = 0.0;
    float leftRight = 0.0;

    bool mouseLooking = false;
    float mouseDeltaX = 0.0;
    float mouseDeltaY = 0.0;
    
    int mouseWheelDelta = 0;

    #init()
    {
    /*
        $.watch_input_state(#mouse_look, 0, #mouse_look, 1, #mouse_look, 0);
        $.watch_mouse(#mouse_move, #mouse_wheel);

        $.watch_input_state(#forward, 0, #forward_backward,  1, #forward_backward, 0);
        $.watch_input_state(#back,    0, #forward_backward, -1, #forward_backward, 0);
        $.watch_input_state(#left,    0, #left_right,        1, #left_right,       0);
        $.watch_input_state(#right,   0, #left_right,       -1, #left_right,       0);
    */
    }

    #mouse_look(int status)
    {
        mouseLooking = status != 0;
    }

    #forward_backward(int value)
    {
	    forwardBackward = 1.0 * value;
    }

    #left_right(int value)
    {
	    leftRight = 1.0 * value;
    }

    update
    {
        bool hasMoved = false;
        
        if (mouseWheelDelta != 0)
        {
            pos += dirForward * (mouseWheelDelta * delta * 0.01);
            mouseWheelDelta = 0;
            hasMoved = true;
        }

        if (mouseLooking)
        {
            bool hasRotated = false;
            if (mouseDeltaX != 0.0)
            {
                float angle = -mouseDeltaX * rotDelta;
                quat orientDelta = $.quat_from_axis_angle(dirUp, angle);
                orientation = orientDelta * orientation;
                hasRotated = true;
            }

            if (mouseDeltaY != 0.0)
            {
                float angle = mouseDeltaY * rotDelta;
                quat orientDelta = $.quat_from_axis_angle(dirRight, angle);
                orientation = orientDelta * orientation;
                hasRotated = true;
            }

            if (hasRotated)
            {
                orientation = $.quat_normalize(orientation);
                
                dirForward = orientation * dirForwardInit;
                dirRight = orientation * dirRightInit;

                // LORRTODO - Add dot accessors to language.
                // Zero out dirRight.y, re-normalize, and calc
                // dirUp with dirForward X dirRight.
                // This should correct "roll" weirdness.
                //dirRight.y = 0.0;

                dirUp = orientation * dirUpInit;

                hasMoved = true;
            }
            
            mouseDeltaX = 0.0;
            mouseDeltaY = 0.0;
        }

        if (forwardBackward != 0.0)
        {
            pos += dirForward * (moveDelta * forwardBackward * delta);
            hasMoved = true;
        }
        if (leftRight != 0.0)
        {
            pos += dirRight * (moveDelta * leftRight * delta);
            hasMoved = true;
        }
        if (hasMoved)
        {
            $.renderer_move_camera(pos, orientation);
        }
    }

    #mouse_move(int xDelta, int yDelta)
    {
        //short xDelta = delta >> 16;
        //short yDelta = delta << 16 >> 16;

        //$.print(string{"delta: %x, xDelta: %d %x, yDelta: %d %x", delta, xDelta, xDelta, yDelta, yDelta});
        //$.print(string{"xDelta: %d, yDelta: %d", xDelta, yDelta});
        if (mouseLooking)
        {
            mouseDeltaX += xDelta;
            mouseDeltaY += yDelta;
        }
    }

    #mouse_wheel(int delta)
    {
        mouseWheelDelta += delta;
    }
}

// Rotate a model when wasd keys are pressed
component WasdRot
{
    vec2 rot = vec2{0.0};
    vec2 newRot = vec2{0.0};
    vec2 orient = vec2{0.0};

    input #demo
    {
        #move_e  { newRot = vec2{ 0.0,  1.0}; }
        #move_ne { newRot = vec2{-1.0,  1.0}; }
        #move_n  { newRot = vec2{-1.0,  0.0}; }
        #move_nw { newRot = vec2{-1.0, -1.0}; }
        #move_w  { newRot = vec2{ 0.0, -1.0}; }
        #move_sw { newRot = vec2{ 1.0, -1.0}; }
        #move_s  { newRot = vec2{ 1.0,  0.0}; }
        #move_se { newRot = vec2{ 1.0,  1.0}; }

        none
        {
            rot = vec2{0.0};
        }

        any
        {
            if (newRot != rot)
            {
                rot = newRot;
            }
        }
    }

    
    update
    {
        if (rot != vec2{0.0})
        {
            orient += rot * 1.5 * delta;
            mat43 trans = $.rotation(vec3{orient.x, orient.y, 0.0});
            @#transform(false, trans);
        }
    }

}

//------------------------------------------------------------------------------

