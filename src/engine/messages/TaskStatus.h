//------------------------------------------------------------------------------
// TaskStatus.h - Autogenerated message class for TaskStatus
//
// Gaen Concurrency Engine - http://gaen.org
// Copyright (c) 2014-2016 Lachlan Orr
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
//
//   2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
//
//   3. This notice may not be removed or altered from any source
//   distribution.
//------------------------------------------------------------------------------

#ifndef GAEN_ENGINE_MESSAGES_TASKSTATUSMESSAGE_H
#define GAEN_ENGINE_MESSAGES_TASKSTATUSMESSAGE_H

#include "engine/MessageWriter.h"
#include "core/threading.h"
#include "engine/Task.h"

namespace gaen
{
namespace messages
{

template <typename T>
class TaskStatusR
{
public:
    TaskStatusR(const T & msgAcc)
      : mMsgAcc(msgAcc)
    {

    }

    TaskStatus status() const { return (TaskStatus)mMsgAcc.message().payload.i; }
        
private:
    TaskStatusR(const TaskStatusR &)              = delete;
    TaskStatusR(const TaskStatusR &&)             = delete;
    TaskStatusR & operator=(const TaskStatusR &)  = delete;
    TaskStatusR & operator=(const TaskStatusR &&) = delete;

    const T & mMsgAcc;


};

typedef TaskStatusR<MessageQueueAccessor> TaskStatusQR;
typedef TaskStatusR<MessageBlockAccessor> TaskStatusBR;

class TaskStatusQW : public MessageQueueWriter
{
public:
    TaskStatusQW(u32 msgId,
                 u32 flags,
                 task_id source,
                 task_id target,
                 TaskStatus status)
      : MessageQueueWriter(msgId,
                           flags,
                           source,
                           target,
                           to_cell(*reinterpret_cast<const u32*>(&status)),
                           0)
    {}

    TaskStatusQW(u32 msgId,
                 u32 flags,
                 task_id source,
                 task_id target,
                 TaskStatus status,
                 MessageQueue * pMsgQueue)
      : MessageQueueWriter(msgId,
                           flags,
                           source,
                           target,
                           to_cell(*reinterpret_cast<const u32*>(&status)),
                           0,
                           pMsgQueue)
    {}
    
    void setStatus(TaskStatus val) { mMsgAcc.message().payload.i = (i32)val; }
private:
    TaskStatusQW(const TaskStatusQW &)              = delete;
    TaskStatusQW(const TaskStatusQW &&)             = delete;
    TaskStatusQW & operator=(const TaskStatusQW &)  = delete;
    TaskStatusQW & operator=(const TaskStatusQW &&) = delete;
};

class TaskStatusBW : public MessageBlockWriter
{
public:
    TaskStatusBW(u32 msgId,
                 u32 flags,
                 task_id source,
                 task_id target,
                 TaskStatus status)
      : MessageBlockWriter(msgId,
                           flags,
                           source,
                           target,
                           to_cell(*reinterpret_cast<const u32*>(&status)),
                           0,
                           mBlocks)
    {}

    void setStatus(TaskStatus val) { mMsgAcc.message().payload.i = (i32)val; }

private:
    TaskStatusBW(const TaskStatusBW &)              = delete;
    TaskStatusBW(const TaskStatusBW &&)             = delete;
    TaskStatusBW & operator=(const TaskStatusBW &)  = delete;
    TaskStatusBW & operator=(const TaskStatusBW &&) = delete;

    Block mBlocks[0 + 1]; // +1 for header
};

} // namespace msg
} // namespace gaen

#endif // #ifndef GAEN_ENGINE_MESSAGES_TASKSTATUSMESSAGE_H

