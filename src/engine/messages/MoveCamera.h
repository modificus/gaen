//------------------------------------------------------------------------------
// MoveCamera.h - Autogenerated message class for MoveCamera
//
// Gaen Concurrency Engine - http://gaen.org
// Copyright (c) 2014-2015 Lachlan Orr
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
//
//   2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
//
//   3. This notice may not be removed or altered from any source
//   distribution.
//------------------------------------------------------------------------------

#ifndef GAEN_ENGINE_MESSAGES_MOVECAMERAMESSAGE_H
#define GAEN_ENGINE_MESSAGES_MOVECAMERAMESSAGE_H

#include "engine/MessageWriter.h"
#include "glm/gtc/quaternion.hpp"
#include "glm/vec3.hpp"

namespace gaen
{
namespace messages
{

template <typename T>
class MoveCameraR
{
public:
    MoveCameraR(const T & msgAcc)
      : mMsgAcc(msgAcc)
    {

    }

    glm::quat direction() const { return mMsgAcc[0].qCell.quat; }
    const glm::vec3 & position() const { return *reinterpret_cast<const glm::vec3*>(&mMsgAcc[1].tCellPad.tCell); }
        
private:
    const T & mMsgAcc;


};

typedef MoveCameraR<MessageQueueAccessor> MoveCameraQR;
typedef MoveCameraR<MessageBlockAccessor> MoveCameraBR;

class MoveCameraQW : public MessageQueueWriter
{
public:
    MoveCameraQW(u32 msgId,
                 u32 flags,
                 task_id source,
                 task_id target)
      : MessageQueueWriter(msgId,
                           flags,
                           source,
                           target,
                           to_cell(0),
                           2)
    {}
    
    void setDirection(glm::quat val) { mMsgAcc[0].qCell.quat = val; }
    void setPosition(const glm::vec3 & val) { mMsgAcc[1].tCellPad.tCell = *reinterpret_cast<const tcell*>(&val); }
};

class MoveCameraBW : public MessageBlockWriter
{
public:
    MoveCameraBW(u32 msgId,
                 u32 flags,
                 task_id source,
                 task_id target)
      : MessageBlockWriter(msgId,
                           flags,
                           source,
                           target,
                           to_cell(0),
                           2,
                           mBlocks)
    {}

    void setDirection(glm::quat val) { mMsgAcc[0].qCell.quat = val; }
    void setPosition(const glm::vec3 & val) { mMsgAcc[1].tCellPad.tCell = *reinterpret_cast<const tcell*>(&val); }

private:
    Block mBlocks[2 + 1]; // +1 for header
};

} // namespace msg
} // namespace gaen

#endif // #ifndef GAEN_ENGINE_MESSAGES_MOVECAMERAMESSAGE_H

