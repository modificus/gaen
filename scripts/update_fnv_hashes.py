#!/usr/bin/env python

#-------------------------------------------------------------------------------
# update_fnv_hashes.py - Pulls fnv references out of code and updates hashes.h/cpp
#
# Gaen Concurrency Engine - http://gaen.org
# Copyright (c) 2014 Lachlan Orr
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#   1. The origin of this software must not be misrepresented; you must not
#   claim that you wrote the original software. If you use this software
#   in a product, an acknowledgment in the product documentation would be
#   appreciated but is not required.
#
#   2. Altered source versions must be plainly marked as such, and must not be
#   misrepresented as being the original software.
#
#   3. This notice may not be removed or altered from any source
#   distribution.
#-------------------------------------------------------------------------------

'''
Pulls fnv references out of code and updates hashes.h/cpp.

Looks for patterns of type "FNV_[a-zA-Z_][a-zA-Z0-9_]*" in the code, and
inserts the corresponding fnv hashes in src/engine/hashes.h/cpp.

If you want to use a new FNV_* pattern, just put it in the code and it
will get processed with this script as a prebuild step.
'''

import os
import re

def fnv32a(s):
    hval = 0x811c9dc5
    fnv_32_prime = 0x01000193
    uint32_max = 2 ** 32
    for c in s:
        hval = hval ^ ord(c)
        hval = (hval * fnv_32_prime) % uint32_max
    return hval
 
# These are members of FNV class, which we don't want to confuse with
# references to precalculated FNV hashses.
EXCLUDE_PATTERNS = ['FNV::fnv1a_32',
                    'FNV::TrackMap',
                    'FNV::build_initial_track_map',
                    'FNV::sTrackMap',
                    'FNV::sTrackMapMutex']
                    
def process_file(path):
    with open(path) as f:
        d = f.read()
        return [s for s in re.findall('FNV::[a-zA-Z_][a-zA-Z0-9_]*', d) if s not in EXCLUDE_PATTERNS]
    
def process_dir(path):
    hashes = []
    for root, dirs, files in os.walk(path):
        for f in files:
            if f not in ['FNV.h', 'FNV.cpp']:
                ext = os.path.splitext(f)[1]
                if ext in ['.h', '.cpp', '.mm']:
                    fullpath = os.path.join(root, f)
                    hashes += process_file(fullpath)
    return hashes
            

def src_dir():
    scriptdir = os.path.split(os.path.abspath(__file__))[0]
    gaendir = os.path.split(scriptdir)[0]
    srcdir = os.path.join(gaendir, 'src')
    return srcdir

def fnv_h_path():
    return os.path.join(src_dir(), 'engine/FNV.h')

def fnv_cpp_path():
    return os.path.join(src_dir(), 'engine/FNV.cpp')

def build_hash_list():
    hash_list = process_dir(src_dir())
    hash_list = [hash[len("FNV::"):] for hash in hash_list]
    hash_list = sorted(set(hash_list))
    hash_list = [(hash, fnv32a(hash)) for hash in hash_list]
    return hash_list

def max_hash_name_len(hash_list):
    return len(max([h[0] for h in hash_list]))

def fnv_declarations(hash_list):
    max_len = max_hash_name_len(hash_list)
    return ''.join(['    static const fnv %s%s = 0x%08x; // %d\n' % (h[0], ' ' * (max_len-len(h[0])), h[1], h[1]) for h in hash_list])

def fnv_h_construct(hash_list):
    return FNV_H_TEMPLATE.replace('<<fnv_const_declarations>>', fnv_declarations(hash_list))

def fnv_initializations(hash_list):
    max_len = max_hash_name_len(hash_list)
    return ''.join(['    ASSERT(FNV::fnv1a_32("%s")%s == FNV::%s);\n' % (h[0],' ' * (max_len-len(h[0])),h[0]) for h in hash_list])

def fnv_cpp_construct(hash_list):
    return FNV_CPP_TEMPLATE.replace('<<fnv_map_insertions>>', fnv_initializations(hash_list))

def is_file_different(path, data):
    if os.path.isfile(path):
        f = open(path)
        d = f.read()
        f.close()
        return d != data
    return True

def write_file_if_different(path, new_data):
    if is_file_different(path, new_data):
        f = open(path, 'wb')
        f.write(new_data)
        f.close()

def update_fnv_files():
    hash_list = build_hash_list()
    write_file_if_different(fnv_h_path(), fnv_h_construct(hash_list))
    write_file_if_different(fnv_cpp_path(), fnv_cpp_construct(hash_list))

def main():
    hash_list = build_hash_list()
    update_fnv_files()


FNV_H_TEMPLATE = ('//------------------------------------------------------------------------------\n'
                  '// FNV.h - Precalculated fnv hashes, generated by update_fnv_hashes.py\n'
                  '//\n'
                  '// Gaen Concurrency Engine - http://gaen.org\n'
                  '// Copyright (c) 2014 Lachlan Orr\n'
                  '//\n'
                  '// This software is provided \'as-is\', without any express or implied\n'
                  '// warranty. In no event will the authors be held liable for any damages\n'
                  '// arising from the use of this software.\n'
                  '//\n'
                  '// Permission is granted to anyone to use this software for any purpose,\n'
                  '// including commercial applications, and to alter it and redistribute it\n'
                  '// freely, subject to the following restrictions:\n'
                  '//\n'
                  '//   1. The origin of this software must not be misrepresented; you must not\n'
                  '//   claim that you wrote the original software. If you use this software\n'
                  '//   in a product, an acknowledgment in the product documentation would be\n'
                  '//   appreciated but is not required.\n'
                  '//\n'
                  '//   2. Altered source versions must be plainly marked as such, and must not be\n'
                  '//   misrepresented as being the original software.\n'
                  '//\n'
                  '//   3. This notice may not be removed or altered from any source\n'
                  '//   distribution.\n'
                  '//------------------------------------------------------------------------------\n'
                  '\n'
                  '#ifndef GAEN_ENGINE_FNV_H\n'
                  '#define GAEN_ENGINE_FNV_H\n'
                  '\n'
                  '#include "core/HashMap.h"\n'
                  '#include "core/base_defines.h"\n'
                  '\n'
                  '// Determines if string collisions are detected in fnv hashes\n'
                  '#define TRACK_HASHES WHEN(HAS(DEV_BUILD))\n'
                  '\n'
                  'namespace gaen\n'
                  '{\n'
                  '\n'
                  'typedef u32 fnv;\n'
                  '\n'
                  'class FNV\n'
                  '{\n'
                  'public:\n'
                  '    static fnv fnv1a_32(const char * str);\n'
                  '\n'
                  '    // Pre calculated fnv hashes.\n'
                  '    // Generated with update_fnv_hashes.py, which gets run\n'
                  '    // during the build.\n'
                  '<<fnv_const_declarations>>'
                  '};\n'
                  '\n'
                  '} // namespace gaen\n'
                  '\n'
                  '\n'
                  '#endif // #ifndef GAEN_ENGINE_FNV_H\n'
                 )

FNV_CPP_TEMPLATE = ('//------------------------------------------------------------------------------\n'
                    '// FNV.cpp - Precalculated fnv hashes, generated by update_fnv_hashes.py\n'
                    '//\n'
                    '// Gaen Concurrency Engine - http://gaen.org\n'
                    '// Copyright (c) 2014 Lachlan Orr\n'
                    '//\n'
                    '// This software is provided \'as-is\', without any express or implied\n'
                    '// warranty. In no event will the authors be held liable for any damages\n'
                    '// arising from the use of this software.\n'
                    '//\n'
                    '// Permission is granted to anyone to use this software for any purpose,\n'
                    '// including commercial applications, and to alter it and redistribute it\n'
                    '// freely, subject to the following restrictions:\n'
                    '//\n'
                    '//   1. The origin of this software must not be misrepresented; you must not\n'
                    '//   claim that you wrote the original software. If you use this software\n'
                    '//   in a product, an acknowledgment in the product documentation would be\n'
                    '//   appreciated but is not required.\n'
                    '//\n'
                    '//   2. Altered source versions must be plainly marked as such, and must not be\n'
                    '//   misrepresented as being the original software.\n'
                    '//\n'
                    '//   3. This notice may not be removed or altered from any source\n'
                    '//   distribution.\n'
                    '//------------------------------------------------------------------------------\n'
                    '\n'
                    '#include "engine/stdafx.h"\n'
                    '\n'
                    '#include "engine/FNV.h"\n'
                    '\n'
                    '#if HAS(TRACK_HASHES)\n'
                    '#include <mutex>\n'
                    '#include "core/HashMap.h"\n'
                    '#include "core/String.h"\n'
                    '#endif // #if HAS(TRACK_HASHES)\n'
                    '\n'
                    'namespace gaen\n'
                    '{\n'
                    '\n'
                    '#if HAS(TRACK_HASHES)\n'
                    '// Insert all our precalculated hashes into sTrackMap so we will know\n'
                    '// if we encounter conflicts in dynamically calculated hashes.  Also,\n'
                    '// verify the precalculted hashes match what our C++ version returns.\n'
                    'typedef HashMap<fnv,String<kMT_Debug>,kMT_Debug> TrackMap;\n'
                    'TrackMap build_initial_track_map()\n'
                    '{\n'
                    '    TrackMap tm;\n'
                    '    tm.rehash(8192);\n'
                    '<<fnv_map_insertions>>'
                    '    return tm;\n'
                    '}\n'
                    'static std::mutex sTrackMapMutex;\n'
                    'static TrackMap sTrackMap = build_initial_track_map();\n'
                    '#endif // #if HAS(TRACK_HASHES)\n'
                    '\n'
                    'static const u32 kFnv1_32Init  = 0x811c9dc5;\n'
                    'static const u32 kFnv1_32Prime = 0x01000193;\n'
                    '\n'
                    'fnv FNV::fnv1a_32(const char *str)\n'
                    '{\n'
                    '    ASSERT(str);\n'
                    '\n'
                    '    u32 hval = kFnv1_32Init;\n'
                    '\n'
                    '    const u8 *s = reinterpret_cast<const u8 *>(str);\n'
                    '\n'
                    '    // FNV-1a hash each octet in the buffer\n'
                    '    while (*s)\n'
                    '    {\n'
                    '        // xor the bottom with the current octet\n'
                    '        hval ^= static_cast<u32>(*s++);\n'
                    '\n'
                    '        // multiply by the 32 bit FNV magic prime mod 2^32\n'
                    '        hval *= kFnv1_32Prime;\n'
                    '    }\n'
                    '\n'
                    '#if HAS(TRACK_HASHES)\n'
                    '    {\n'
                    '        std::lock_guard<std::mutex> lock(sTrackMapMutex);\n'
                    '        auto it = sTrackMap.find(hval);\n'
                    '        if (it != sTrackMap.end())\n'
                    '        {\n'
                    '            // If this assert fires, you have two distinct strings whose\n'
                    '            // fnv hashes clash.  This will likely break stuff in horrific\n'
                    '            // ways.  You need to tweak one of the strings, change its\n'
                    '            // value slightly and the problem should be resolved.\n'
                    '            // Sorry... it\'s the price to be paid for runtime efficiency.\n'
                    '            ASSERT_MSG(it->second == str, "FNV Hash Clash Detected: %s and %s", it->second.c_str(), str);\n'
                    '        }\n'
                    '        else\n'
                    '        {\n'
                    '            sTrackMap.emplace(hval, str);\n'
                    '        }\n'
                    '    }\n'
                    '#endif // #if HAS(TRACK_HASHES)\n'
                    '\n'
                    '    // return our new hash value\n'
                    '    return hval;\n'
                    '}\n'
                    '\n'
                    '} // namespace gaen\n'
                    '\n'
                   )


if __name__=='__main__':
    main()
