#!/usr/bin/env python

#-------------------------------------------------------------------------------
# make_property_classes.py - Generate c++ property classes from defs
#
# Gaen Concurrency Engine - http://gaen.org
# Copyright (c) 2014 Lachlan Orr
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#   1. The origin of this software must not be misrepresented; you must not
#   claim that you wrote the original software. If you use this software
#   in a product, an acknowledgment in the product documentation would be
#   appreciated but is not required.
#
#   2. Altered source versions must be plainly marked as such, and must not be
#   misrepresented as being the original software.
#
#   3. This notice may not be removed or altered from any source
#   distribution.
#-------------------------------------------------------------------------------

import os
import posixpath

PROPERTY_CLASS_TEMPLATE = '''\
//------------------------------------------------------------------------------
// <<properties_name>>Properties.h - Autogenerated property class for <<properties_name>>
//
// Gaen Concurrency Engine - http://gaen.org
// Copyright (c) 2014 Lachlan Orr
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
//
//   2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
//
//   3. This notice may not be removed or altered from any source
//   distribution.
//------------------------------------------------------------------------------

#ifndef GAEN_ENGINE_PROPERTIES_<<properties_name_caps>>PROPERTIES_H
#define GAEN_ENGINE_PROPERTIES_<<properties_name_caps>>PROPERTIES_H

<<includes>>
namespace gaen
{

} // namespace gaen

#endif // #ifndef GAEN_ENGINE_PROPERTIES_<<properties_name_caps>>PROPERTIES_H
'''



PROPERTIES_CMAKE_TEMPLATE = '''\
#-------------------------------------------------------------------------------
# properties.cmake - Autogenerated file containing the list of property .h files
#
# Gaen Concurrency Engine - http://gaen.org
# Copyright (c) 2014 Lachlan Orr
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#   1. The origin of this software must not be misrepresented; you must not
#   claim that you wrote the original software. If you use this software
#   in a product, an acknowledgment in the product documentation would be
#   appreciated but is not required.
#
#   2. Altered source versions must be plainly marked as such, and must not be
#   misrepresented as being the original software.
#
#   3. This notice may not be removed or altered from any source
#   distribution.
#-------------------------------------------------------------------------------

SET (engine_property_defs_SOURCES
<<property_header_files>>
)  
'''

def scripts_path():
    scriptdir = os.path.split(os.path.abspath(__file__))[0].replace('\\', '/')
    return scriptdir

def properties_def_path():
    gaendir = posixpath.split(scripts_path())[0]
    return posixpath.join(gaendir, 'src/engine/property_defs')

def parse_properties_def():
    context = globals()
    context['FIELD_HANDLERS'] = []
    with open(posixpath.join(scripts_path(), 'field_handler.py')) as f:
        exec f in context
    def_path = posixpath.join(properties_def_path(), 'properties.def')
    with open(def_path) as f:
        exec f in context
    return context['FIELD_HANDLERS']

def gen_property_cmake(field_handlers):
    lines = []
    for field_handler in field_handlers:
        lines.append('  property_defs/%sProperties.h' % field_handler.object_name)
    lines.sort()
    return PROPERTIES_CMAKE_TEMPLATE.replace('<<property_header_files>>', '\n'.join(lines))

def read_file_data(path):
    with open(path, 'rb') as in_f:
        old_data = in_f.read()
        return old_data

def replace_file_if_different(path, data):
    if not os.path.exists(path) or read_file_data(path) != data:
        print 'Writing ' + path
        with open(path, 'wb') as out_f:
            out_f.write(data)

def gen_property_classes():
    field_handlers = parse_properties_def()
#    for field_handler in field_handlers:
#        cpp_data = gen_property_class(field_handler)
#        cpp_path = posixpath.join(properties_def_path(), field_handler.object_name + 'Property.h')
#        replace_file_if_different(cpp_path, cpp_data)
    cmake_data = gen_property_cmake(field_handlers)
    cmake_path = posixpath.join(properties_def_path(), 'properties.cmake')
    replace_file_if_different(cmake_path, cmake_data)
        

if __name__ == '__main__':
    gen_property_classes()

